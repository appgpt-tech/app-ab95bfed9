//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { dailyAstrologyUpdatesEntity } from './db/dailyAstrologyUpdates.entity';
import { subscriptionPlansEntity } from './db/subscriptionPlans.entity';
import { usersEntity } from './db/users.entity';
import { paymentDetailsEntity } from './db/paymentDetails.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      dailyAstrologyUpdatesEntity,
      subscriptionPlansEntity,
      usersEntity,
      paymentDetailsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      dailyAstrologyUpdates: [
        { astrologySigns: 'astrologySigns 1', id: 96 },
        { astrologySigns: 'astrologySigns 2', id: 0 },
        { astrologySigns: 'astrologySigns 3', id: 75 },
        { astrologySigns: 'astrologySigns 4', id: 60 },
        { astrologySigns: 'astrologySigns 5', id: 73 },
      ],
      subscriptionPlans: [
        { name: 'name 1', id: 59 },
        { name: 'name 2', id: 28 },
        { name: 'name 3', id: 59 },
        { name: 'name 4', id: 70 },
        { name: 'name 5', id: 70 },
      ],
      users: [
        { chat: 'chat 1', id: 29 },
        { chat: 'chat 2', id: 18 },
        { chat: 'chat 3', id: 6 },
        { chat: 'chat 4', id: 89 },
        { chat: 'chat 5', id: 57 },
      ],
      paymentDetails: [
        { upiId: 'upiId 1', id: 30 },
        { upiId: 'upiId 2', id: 6 },
        { upiId: 'upiId 3', id: 17 },
        { upiId: 'upiId 4', id: 12 },
        { upiId: 'upiId 5', id: 68 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource(
        'dailyAstrologyUpdatesEntity',
        data.dailyAstrologyUpdates,
      );
      await this.SeedResource(
        'subscriptionPlansEntity',
        data.subscriptionPlans,
      );
      await this.SeedResource('usersEntity', data.users);
      await this.SeedResource('paymentDetailsEntity', data.paymentDetails);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
